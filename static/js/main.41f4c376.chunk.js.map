{"version":3,"sources":["httpRequest.js","Mafia.js","panels/RegistredPlayers.js","panels/UserPanel.js","panels/Home.js","panels/EditPanel.js","panels/Register.js","App.js","index.js"],"names":["httpRequest","method","url","data","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","this","status","response","error","Error","statusText","code","onerror","JSON","stringify","send","httpRequestJSON","a","async","json","parse","console","warn","api_url","players","game","get","apiMethod","post","load","what","loadPlayers","loadGame","getPlayer","id","getPlayerByNickname","nickname","pid","getPlayers","isPlayerInGame","getGamePlayers","registerPlayer","ok","addToGame","signup_for_game","setNickname","Object","assign","updatePlayer","options","opts","name","sex","updateMafia","RegistredPlayers","props","state","title","view","size","renderPlayers","bind","onRefresh","setState","fetching","Mafia","then","users","connect","access_token","ids","push","vk_id","join","vk_users","uid","user","photo_200","jsx","isYoureRegistred","parseInt","fetchedUser","key","before","src","description","onClick","window","playersCount","keys","length","playersWord","React","Component","UserPanel","button","signup","confirmRegister","signed","cancelRegister","level","loading","style","paddingLeft","paddingRight","player","first_name","go","data-to","width","height","display","updateButton","register","setPopout","actions","autoclose","action","onClose","actionsLayout","success","in_game","photo","bottomContent","fontSize","Home","userPanel","createRef","registredPlayers","current","isFetching","ref","osname","platform","EditPanel","nicknameExists","nickname_class","nickname_text","onChange","onSubmit","back","e","currentTarget","value","validChars","test","clearTimeout","TimerID","setTimeout","event","left","IOS","type","top","defaultChecked","bottom","osName","Register","responseText","App","useState","activePanel","setActivePanel","setUser","popout","useEffect","subscribe","detail","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","fetchData","dataset","to","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.41f4c376.chunk.js","sourcesContent":["export default function httpRequest (method, url, data) {\r\n    return new Promise(function(resolve, reject) {\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(method, url, true);\r\n\r\n        xhr.onload = function() {\r\n            if (this.status === 200) {\r\n                resolve(this.response);\r\n            } else {\r\n                var error = new Error(this.statusText);\r\n                error.code = this.status;\r\n                reject(error);\r\n            }\r\n        };\r\n\r\n        xhr.onerror = function() {\r\n            reject(\"Network Error\");\r\n        };\r\n\r\n        if (data && typeof data !== 'string') {\r\n            data = JSON.stringify(data);\r\n        }\r\n        xhr.send(data);\r\n    });\r\n}\r\n\r\nexport async function httpRequestJSON(method, url, data) {\r\n    let json = await httpRequest(method, url, data);\r\n    try {\r\n        let response = JSON.parse(json);\r\n        return response;\r\n    } catch (err) {\r\n        console.warn(`${method} '${url}' -> returns non-json response. Error:`, err);\r\n        return false;\r\n    }\r\n}\r\n","import {httpRequestJSON} from \"./httpRequest\";\r\n\r\nconst api_url = 'https://vkapp.mailpromtrans.ru/api/';\r\nlet players = null;\r\nlet game = null;\r\nlet timestamp = null;\r\n\r\nfunction timeToUpdate() {\r\n    return !timestamp || ((new Date()) - timestamp) / 1000 < 10;\r\n}\r\n\r\nfunction get(apiMethod, data) { return httpRequestJSON('GET', api_url + apiMethod, data) }\r\nfunction post(apiMethod, data) { return httpRequestJSON('POST', api_url + apiMethod, data) }\r\nasync function load(what) {\r\n    let data = await get(what);\r\n    if (data === false)\r\n        return [];\r\n\r\n    if (what === 'players' && 'players' in data) {\r\n        players = data.players;\r\n        return players;\r\n    } else if (what === 'game' && 'players' in data) {\r\n        game = data.players;\r\n        return game;\r\n    } else\r\n        console.warn(`Cannot find {response}.players from request to '${what}' API`);\r\n\r\n}\r\nasync function loadPlayers() {\r\n    if (timeToUpdate() || !players)\r\n        await load('players');\r\n    return players;\r\n}\r\nasync function loadGame() {\r\n    if (timeToUpdate() || !game)\r\n        await load('game');\r\n    return game;\r\n}\r\n\r\n/**\r\n * Получение информации об игроке из БД Мафии\r\n * @param {int} id ID пользователя ВКонтакте\r\n * @return {array|bool} Array с данными игрока, False если игрока не существует\r\n */\r\nasync function getPlayer(id) {\r\n    await loadPlayers();\r\n    if (id in players) return players[id];\r\n    return false;\r\n}\r\n\r\nasync function getPlayerByNickname(nickname) {\r\n    await loadPlayers();\r\n    for (let pid in players) {\r\n        if (players[pid].nickname === nickname)\r\n            return players[pid];\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Зарегистрирован ли игрок на игру\r\n * @param {int} id ID пользователя ВКонтакте\r\n * @return {bool} true если да, false если нет\r\n */\r\nasync function isPlayerInGame(id) {\r\n    await loadGame();\r\n    return id in game;\r\n}\r\n\r\n/**\r\n * Получение списка игроков, зарегистрированных в БД Мафии\r\n * @return {array} Массив игроков\r\n */\r\nasync function getPlayers() {\r\n    await loadPlayers();\r\n    return players;\r\n}\r\n\r\n/**\r\n * Получение списка игроков, записавшихся на игру\r\n * @return {array} Массив игроков\r\n */\r\nasync function getGamePlayers() {\r\n    await loadGame();\r\n    return game;\r\n}\r\n\r\n/**\r\n * Установка нового ника игроку\r\n * @param {int} id ID пользователя ВКонтакте\r\n * @param {string} nickname Ник игрока\r\n */\r\nasync function setNickname(id, nickname) {\r\n    let data = await post('players', {\r\n        id: id,\r\n        nickname: nickname,\r\n    });\r\n\r\n    if (data === false || data.ok === false)\r\n        return false;\r\n\r\n    players[id] = Object.assign(players[id], data.players[id]);\r\n    return true;\r\n}\r\n\r\nasync function updatePlayer(id, options) {\r\n    let opts = { id: id };\r\n    options.name && (opts.name = options.name);\r\n    options.nickname && (opts.nickname = options.nickname);\r\n    options.sex && (opts.sex = options.sex);\r\n    let data = await post('players', opts);\r\n\r\n    if (data === false || data.ok === false)\r\n        return false;\r\n\r\n    players[id] = Object.assign(players[id], data.players[id]);\r\n    return true;\r\n}\r\n\r\n/**\r\n * Обновление списка игроков\r\n * @return {true} Всегда true по окончанию обновления\r\n */\r\nasync function updateMafia() {\r\n    await load('players');\r\n    await load('game');\r\n    return true;\r\n}\r\n\r\n/**\r\n * Регистрирует игрока в БД мафии\r\n * @param {int} id ID пользователя ВКонтакте\r\n * @return {bool}\r\n */\r\nasync function registerPlayer(id) {\r\n    let data = await post('register', { id: id });\r\n    if (data === false || data.ok === false)\r\n        return false;\r\n    await load('players');\r\n    return true;\r\n}\r\n\r\n/**\r\n * Записывает игрока на игру. Создаёт его, если игрока не существует\r\n * @param {int} id ID пользователя ВКонтакте\r\n * @return {bool}\r\n */\r\nasync function addToGame(id) {\r\n    let data = await post('register', { id: id, signup_for_game: true });\r\n    if (data === false || data.ok === false)\r\n        return false;\r\n\r\n    await load('players');\r\n    await load('game');\r\n    return true;\r\n}\r\n\r\nexport default { getPlayer, getPlayerByNickname, getPlayers, isPlayerInGame, getGamePlayers, registerPlayer, addToGame, setNickname, updatePlayer, updateMafia };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport connect from '@vkontakte/vk-connect';\r\nimport { Group, Cell, Avatar, Div, Spinner } from '@vkontakte/vkui'; // , PullToRefresh\r\nimport Mafia from '../Mafia';\r\n\r\nclass RegistredPlayers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: \"Игроки\",\r\n            view: <Div><Spinner size='large' /></Div>,\r\n        };\r\n\r\n        this.renderPlayers = this.renderPlayers.bind(this);\r\n\r\n        this.onRefresh = () => {\r\n            this.setState({ fetching: true });\r\n            this.renderPlayers();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.renderPlayers();\r\n    }\r\n\r\n    // componentDidUpdate() {\r\n    //     this.renderPlayers();\r\n    // }\r\n\r\n    renderPlayers() {\r\n        let players;\r\n        Mafia.getGamePlayers()\r\n        .then(users => {\r\n            players = users;\r\n            return connect.send(\"VKWebAppGetAuthToken\", {\"app_id\": 7288259, \"scope\": \"\"});\r\n        })\r\n        .then((response) => {\r\n            this.access_token = response.access_token;\r\n\r\n            let ids = [];\r\n            for (let pid in players) {\r\n                ids.push(players[pid].vk_id);\r\n            }\r\n            return connect.send(\"VKWebAppCallAPIMethod\", {\r\n                \"method\": \"users.get\",\r\n                \"params\": {\r\n                    \"user_ids\": ids.join(','),\r\n                    \"fields\": \"photo_200\",\r\n                    \"v\": \"5.103\",\r\n                    \"access_token\": this.access_token\r\n                }\r\n            });\r\n        })\r\n        .then(vk_users => {\r\n            let users = vk_users.response;\r\n            for (let uid in users) {\r\n                let user = users[uid];\r\n                players[user.id].photo_200 = ('photo_200' in users[uid]) && users[uid].photo_200;\r\n            }\r\n\r\n            let jsx = [];\r\n            let isYoureRegistred = false;\r\n            if (players) {\r\n                for (let pid in players) {\r\n                    if (parseInt(pid) === this.props.fetchedUser.id) {\r\n                        isYoureRegistred = true;\r\n                        delete players[pid];\r\n                        continue;\r\n                    }\r\n                    jsx.push(<Cell\r\n                                 key={pid}\r\n                                 before={players[pid].photo_200 ? <Avatar src={players[pid].photo_200}/> : null}\r\n                                 description={players[pid].name}\r\n                                 onClick={() => { window.open(\"https://vk.com/id\"+pid) }}\r\n                             >{ players[pid].nickname }</Cell>);\r\n                }\r\n            }\r\n\r\n            let playersCount = Object.keys(players).length;\r\n            let playersWord = 'игрок';\r\n            if (playersCount <= 4 && playersCount >= 2 ) {\r\n                playersWord += 'a';\r\n            } else if (playersCount !== 1) {\r\n                playersWord += 'ов';\r\n            }\r\n            this.setState({\r\n                title: (isYoureRegistred ? 'Вы и ещё ' : '') + playersCount + ' ' + playersWord,\r\n                view: jsx,\r\n                fetching: false,\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Group title={this.state.title}>\r\n                {this.state.view}\r\n            </Group>\r\n        );\r\n    }\r\n}\r\n\r\nRegistredPlayers.propTypes = {\r\n\tfetchedUser: PropTypes.shape({\r\n\t\tid: PropTypes.number,\r\n        photo_200: PropTypes.string,\r\n        name: PropTypes.string.isRequired,\r\n        nickname: PropTypes.string,\r\n\t\tfirst_name: PropTypes.string,\r\n\t\tlast_name: PropTypes.string,\r\n\t\tcity: PropTypes.shape({\r\n\t\t\ttitle: PropTypes.string,\r\n\t\t}),\r\n\t}),\r\n};\r\n\r\nexport default RegistredPlayers;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Alert, Cell, Group, Avatar, Button, Spinner } from '@vkontakte/vkui';\r\nimport Icon24Write from '@vkontakte/icons/dist/24/write';\r\n\r\n// import httpRequest from '../httpRequest';\r\nimport Mafia from '../Mafia';\r\n\r\nclass UserPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.button = {\r\n            signup: <Button onClick={() => this.confirmRegister()}>Записаться на игру</Button>,\r\n            signed: <Button onClick={() => this.cancelRegister()} level=\"secondary\">Вы записаны на игру</Button>,\r\n            loading: <Button level=\"secondary\" style={{ paddingLeft: 25, paddingRight: 25 }}><Spinner size=\"small\" /></Button>,\r\n        };\r\n\r\n        this.state = {\r\n            button: this.button.loading,\r\n            player: {\r\n                name: this.props.fetchedUser.first_name,\r\n                nickname: this.props.fetchedUser.nickname\r\n                    ? this.props.fetchedUser.nickname\r\n                    : <div onClick={this.props.go} data-to=\"edit\">{'Указать игровой ник'} <Icon24Write width={12} height={12} style={{ display: 'inline-block' }} /></div>,\r\n                sex: this.props.fetchedUser.sex,\r\n            },\r\n        };\r\n\r\n        this.updateButton = this.updateButton.bind(this);\r\n        this.register = this.register.bind(this);\r\n        this.confirmRegister = this.confirmRegister.bind(this);\r\n        this.cancelRegister = this.cancelRegister.bind(this);\r\n    }\r\n\r\n    confirmRegister() {\r\n        this.props.setPopout(<Alert\r\n                actions={[{\r\n                    title: 'Отмена',\r\n                    autoclose: true,\r\n                    style: 'cancel'\r\n                }, {\r\n                    title: 'Записаться',\r\n                    autoclose: true,\r\n                    action: this.register,\r\n                }]}\r\n                onClose={() => this.props.setPopout(null)}\r\n            >\r\n                <h2>Вы хотите записаться?</h2>\r\n                <p>Отменить запись можно будет только через сообщения сообщества.</p>\r\n            </Alert>\r\n        );\r\n    }\r\n\r\n    cancelRegister() {\r\n        this.props.setPopout(<Alert\r\n                actionsLayout='vertical'\r\n                actions={[{\r\n                    title: 'Сообщения сообщества',\r\n                    autoclose: true,\r\n                    style: 'destructive',\r\n                    action: this.register,\r\n                }, {\r\n                    title: 'Закрыть',\r\n                    autoclose: true,\r\n                    style: 'cancel',\r\n                }]}\r\n                onClose={() => this.props.setPopout(null)}\r\n            >\r\n                <h2>Отмена записи</h2>\r\n                <p>Запись можно отменить только через сообщения сообщества.</p>\r\n            </Alert>\r\n        );\r\n    }\r\n\r\n    async register() {\r\n        this.setState({ button: this.button.loading });\r\n        let success = await Mafia.addToGame(this.props.fetchedUser.id)\r\n        this.setState({\r\n            button: (success)\r\n                ? this.button.signed\r\n                : this.button.signup\r\n        });\r\n    }\r\n\r\n    async updateButton() {\r\n        let in_game = await Mafia.isPlayerInGame(this.props.fetchedUser.id);\r\n        this.setState({\r\n            button: in_game\r\n                ? this.button.signed\r\n                : this.button.signup\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateButton();\r\n    }\r\n\r\n    // componentWillUpdate() {\r\n    //     this.updateButton();\r\n    // }\r\n\r\n    render() {\r\n        if (!this.props.fetchedUser)\r\n            return null;\r\n\r\n        return (\r\n        <Group>\r\n            <Cell\r\n              photo={this.props.fetchedUser.photo_200}\r\n              description={this.state.player.name}\r\n              bottomContent={this.state.button}\r\n              before={<Avatar src={this.props.fetchedUser.photo_200} size={80}/>}\r\n              size=\"l\"\r\n              style={{fontSize: '1.2em'}}\r\n            >\r\n                { this.state.player.nickname }\r\n            </Cell>\r\n        </Group>\r\n        );\r\n    }\r\n}\r\n\r\nUserPanel.propTypes = {\r\n    go: PropTypes.func.isRequired,\r\n\tfetchedUser: PropTypes.shape({\r\n\t\tid: PropTypes.number,\r\n\t\tphoto_200: PropTypes.string,\r\n        name: PropTypes.string.isRequired,\r\n        nickname: PropTypes.string,\r\n\t\tfirst_name: PropTypes.string,\r\n\t\tlast_name: PropTypes.string,\r\n\t\tcity: PropTypes.shape({\r\n\t\t\ttitle: PropTypes.string,\r\n        }),\r\n        sex: PropTypes.number,\r\n    }),\r\n    setPopout: PropTypes.func,\r\n};\r\n\r\nexport default UserPanel;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Panel, PanelHeader, PullToRefresh} from '@vkontakte/vkui';\n\nimport RegistredPlayers from './RegistredPlayers';\nimport UserPanel from './UserPanel';\n// import Mafia from '../Mafia';\n\nclass Home extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfetching: false,\n\t\t};\n\n\t\tthis.userPanel = React.createRef();\n\t\tthis.registredPlayers = React.createRef();\n\n\t\tthis.onRefresh = this.onRefresh.bind(this);\n\t}\n\n\tasync onRefresh() {\n\t\tthis.setState({ fetching: true });\n\t\t// let player = await Mafia.getPlayer(this.props.fetchedUser.id);\n\t\tawait this.userPanel.current.updateButton();\n\t\tthis.registredPlayers.current.renderPlayers();\n\t\tthis.setState({\n\t\t\t// fetchedUser: player,\n\t\t\tfetching: false,\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Panel id={this.props.id}>\n\t\t\t\t<PanelHeader>Мафия | Елабуга</PanelHeader>\n\t\t\t\t{this.props.fetchedUser &&\n\t\t\t\t<PullToRefresh onRefresh={() => this.onRefresh()} isFetching={this.state.fetching}>\n\t\t\t\t\t<UserPanel fetchedUser={this.props.fetchedUser} setPopout={this.props.setPopout} go={this.props.go} ref={this.userPanel} />\n\t\t\t\t\t<RegistredPlayers fetchedUser={this.props.fetchedUser} ref={this.registredPlayers} />\n\t\t\t\t</PullToRefresh>}\n\t\t\t</Panel>\n\t\t);\n\t}\n}\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tid: PropTypes.number,\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n\tsetPopout: PropTypes.func.isRequired,\n};\n\nexport default Home;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { PanelHeader, HeaderButton, platform, IOS, Panel, FormLayout, Input, FormLayoutGroup, Radio, Button, Spinner } from '@vkontakte/vkui';\r\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\r\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\r\n\r\nimport Mafia from '../Mafia';\r\n// import Icon24Write from '@vkontakte/icons/dist/24/write';\r\n\r\nconst osname = platform();\r\n\r\nclass EditPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let nicknameExists = this.props.fetchedUser.nickname !== null;\r\n        this.state = {\r\n            name: this.props.fetchedUser.name,\r\n            nickname: nicknameExists ? this.props.fetchedUser.nickname : '',\r\n            sex: this.props.fetchedUser.sex,\r\n            nickname_class: 'default',\r\n            nickname_text: 'Ник должен состоять только из русских букв',\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.back = this.back.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n\r\n        if (name === 'nickname') {\r\n            let validChars = value === '' || !/([^А-Яа-я]+)/i.test(value);\r\n            this.setState({\r\n                nickname_class: validChars ? 'default' : 'error',\r\n                nickname_text: validChars ? this.state.nickname_text : 'Ник должен состоять только из русских букв',\r\n            });\r\n            clearTimeout(this.TimerID);\r\n            if (!validChars) return;\r\n        }\r\n\r\n        this.setState({ nickname_text: <Spinner size=\"small\" /> });\r\n        this.TimerID = setTimeout(function () {\r\n            Mafia.getPlayerByNickname(value)\r\n                .then(player => {\r\n                    player = player && value === this.props.fetchedUser.nickname ? true : false;\r\n                    this.setState({\r\n                        nickname_class: (player === false)\r\n                            ? 'valid'\r\n                            : 'error',\r\n                        nickname_text: (player === false)\r\n                            ? 'Ник свободен'\r\n                            : 'Игрок с таким ником уже существует'\r\n                    });\r\n                });\r\n        }.bind(this), 750);\r\n    }\r\n\r\n    onSubmit(e) {\r\n        const {...event} = e;\r\n        if (this.state.name === '') return false;\r\n        if (this.state.nickname !== '' &&\r\n            this.state.nickname_class !== 'valid' &&\r\n            this.state.nickname !== this.props.fetchedUser.nickname\r\n           )\r\n            return false;\r\n\r\n        Mafia.updatePlayer(this.props.fetchedUser.id, {\r\n            nickname: this.state.nickname,\r\n            name: this.state.name,\r\n            sex: this.state.sex,\r\n        })\r\n        .then(success => {\r\n            if (success === true)\r\n                this.props.go(event);\r\n            else\r\n                console.warn('Cant save nickname');\r\n        });\r\n    }\r\n\r\n    back(e) {\r\n        this.props.go(e);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Panel id={this.props.id}>\r\n\t\t\t\t<PanelHeader\r\n                    left={<HeaderButton onClick={this.back} data-to=\"home\">{osname === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}</HeaderButton>}\r\n                >\r\n                    Мафия | Редактирование\r\n                </PanelHeader>\r\n\t\t\t\t{this.props.fetchedUser &&\r\n                    <FormLayout>\r\n                        <Input\r\n                            type=\"text\"\r\n                            top=\"Имя\"\r\n                            name=\"name\"\r\n                            value={this.state.name}\r\n                            onChange={this.onChange}\r\n                        />\r\n\r\n                        <FormLayoutGroup top=\"Как к Вам обращаться?\">\r\n                            <Radio name=\"sex\" defaultChecked={this.state.sex === 1}>Господин</Radio>\r\n                            <Radio name=\"sex\" defaultChecked={this.state.sex === 0}>Госпожа</Radio>\r\n                        </FormLayoutGroup>\r\n\r\n                        <Input\r\n                            type=\"text\"\r\n                            top=\"Игровой ник\"\r\n                            name=\"nickname\"\r\n                            value={this.state.nickname}\r\n                            onChange={this.onChange}\r\n                            status={this.state.nickname_class}\r\n                            bottom={this.state.nickname_text}\r\n                        />\r\n\r\n                        <Button size=\"xl\" onClick={(e) => this.onSubmit(e)} data-to=\"home\">Сохранить</Button>\r\n                    </FormLayout>}\r\n\t\t\t</Panel>\r\n        );\r\n    }\r\n}\r\n\r\nEditPanel.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    go: PropTypes.func.isRequired,\r\n\tfetchedUser: PropTypes.shape({\r\n\t\tid: PropTypes.number,\r\n        photo_200: PropTypes.string,\r\n        name: PropTypes.string.isRequired,\r\n        nickname: PropTypes.string,\r\n\t\tfirst_name: PropTypes.string,\r\n\t\tlast_name: PropTypes.string,\r\n\t\tcity: PropTypes.shape({\r\n\t\t\ttitle: PropTypes.string,\r\n        }),\r\n        sex: PropTypes.number,\r\n    }),\r\n    setPopout: PropTypes.func,\r\n};\r\n\r\nexport default EditPanel;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport './Register.css';\n\nconst osName = platform();\n\nconst Register = (props) => {\n\tlet xhr = new XMLHttpRequest();\n\txhr.open('POST', 'https://vkapp.mailpromtrans.ru/api/register');\n\txhr.send(JSON.stringify({\n\t\t'vk_id': props.id\n\t}));\n\tlet success = true;\n\tif (xhr.status !== 200) {\n\t\tsuccess = false;\n\t}\n\tlet result = JSON.parse(xhr.responseText);\n\tif (result.ok === false) {\n\t\tsuccess = false;\n\t}\n\n\tlet jsx = success ? (<View>Вы записаны на игру!</View>) : (<View>Не удалось записать на игру<br />Попробуйте записаться через личные сообщения группы</View>);\n\n\treturn (\n\t\t<Panel id={props.id}>\n\t\t\t<PanelHeader\n\t\t\t\tleft={<HeaderButton onClick={props.go} data-to=\"home\">\n\t\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t\t</HeaderButton>}\n\t\t\t>\n\t\t\t\t<PanelHeader>Регистрация на Мафию</PanelHeader>\n\t\t\t</PanelHeader>\n\t\t\t{jsx}\n\t\t</Panel>\n\t);\n};\n\nRegister.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Register;\n","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport {View, ScreenSpinner} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\nimport EditPanel from './panels/EditPanel';\nimport Register from './panels/Register';\nimport Mafia from './Mafia';\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tlet user = await connect.send('VKWebAppGetUserInfo');\n\t\t\tlet player = await Mafia.getPlayer(user.id);\n\t\t\tif (player === false) {\n\t\t\t\tawait Mafia.registerPlayer(user.id);\n\t\t\t\tplayer = await Mafia.getPlayer(user.id);\n\t\t\t}\n\t\t\tuser = Object.assign(user, player);\n\t\t\tsetUser(user);\n\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} setPopout={setPopout} />\n\t\t\t<EditPanel id='edit' fetchedUser={fetchedUser} go={go} setPopout={setPopout} />\n\t\t\t<Register id='register' go={go} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}